// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: admin.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getFileMetadataByID = `-- name: GetFileMetadataByID :one
SELECT
    uf.filename,
    pf.storage_path,
    pf.size_bytes
FROM user_files uf
JOIN physical_files pf ON uf.physical_file_id = pf.id
WHERE uf.id = $1
`

type GetFileMetadataByIDRow struct {
	Filename    string
	StoragePath string
	SizeBytes   int64
}

// For admin use: retrieves file metadata without any ownership checks.
func (q *Queries) GetFileMetadataByID(ctx context.Context, id int64) (GetFileMetadataByIDRow, error) {
	row := q.db.QueryRow(ctx, getFileMetadataByID, id)
	var i GetFileMetadataByIDRow
	err := row.Scan(&i.Filename, &i.StoragePath, &i.SizeBytes)
	return i, err
}

const getSystemStats = `-- name: GetSystemStats :one
SELECT
    (SELECT COUNT(*) FROM users)::bigint AS total_users,
    (SELECT COUNT(*) FROM user_files)::bigint AS total_files,
    (SELECT COALESCE(SUM(size_bytes), 0) FROM physical_files)::bigint AS total_storage_used,
    (SELECT COALESCE(SUM(download_count), 0) FROM shares)::bigint AS total_downloads
`

type GetSystemStatsRow struct {
	TotalUsers       int64
	TotalFiles       int64
	TotalStorageUsed int64
	TotalDownloads   int64
}

// For admin use: retrieves system-wide aggregate statistics.
func (q *Queries) GetSystemStats(ctx context.Context) (GetSystemStatsRow, error) {
	row := q.db.QueryRow(ctx, getSystemStats)
	var i GetSystemStatsRow
	err := row.Scan(
		&i.TotalUsers,
		&i.TotalFiles,
		&i.TotalStorageUsed,
		&i.TotalDownloads,
	)
	return i, err
}

const listAllFiles = `-- name: ListAllFiles :many
SELECT
    uf.id,
    uf.filename,
    uf.mime_type,
    uf.upload_date,
    pf.size_bytes,
    u.email as owner_email
FROM user_files uf
JOIN users u ON uf.owner_id = u.id
JOIN physical_files pf ON uf.physical_file_id = pf.id
ORDER BY uf.upload_date DESC
`

type ListAllFilesRow struct {
	ID         int64
	Filename   string
	MimeType   string
	UploadDate pgtype.Timestamptz
	SizeBytes  int64
	OwnerEmail string
}

// For admin use: retrieves all files with uploader's email.
func (q *Queries) ListAllFiles(ctx context.Context) ([]ListAllFilesRow, error) {
	rows, err := q.db.Query(ctx, listAllFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllFilesRow
	for rows.Next() {
		var i ListAllFilesRow
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.MimeType,
			&i.UploadDate,
			&i.SizeBytes,
			&i.OwnerEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
