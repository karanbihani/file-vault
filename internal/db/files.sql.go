// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: files.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPhysicalFile = `-- name: CreatePhysicalFile :one
INSERT INTO physical_files (
  sha256_hash,
  size_bytes,
  storage_path
) VALUES (
  $1, $2, $3
)
RETURNING id, sha256_hash, size_bytes, storage_path, reference_count, created_at
`

type CreatePhysicalFileParams struct {
	Sha256Hash  string
	SizeBytes   int64
	StoragePath string
}

// Inserts a new physical_file record into the database when a new unique file is uploaded.
// It returns the newly created record.
func (q *Queries) CreatePhysicalFile(ctx context.Context, arg CreatePhysicalFileParams) (PhysicalFile, error) {
	row := q.db.QueryRow(ctx, createPhysicalFile, arg.Sha256Hash, arg.SizeBytes, arg.StoragePath)
	var i PhysicalFile
	err := row.Scan(
		&i.ID,
		&i.Sha256Hash,
		&i.SizeBytes,
		&i.StoragePath,
		&i.ReferenceCount,
		&i.CreatedAt,
	)
	return i, err
}

const createUserFile = `-- name: CreateUserFile :one
INSERT INTO user_files (
  owner_id,
  physical_file_id,
  filename,
  mime_type,
  description,
  tags
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, owner_id, physical_file_id, filename, mime_type, description, tags, upload_date
`

type CreateUserFileParams struct {
	OwnerID        int64
	PhysicalFileID int64
	Filename       string
	MimeType       string
	Description    pgtype.Text
	Tags           []string
}

// Inserts a new user_file record, linking a user to a physical file.
// UPDATED: Now includes description and tags.
func (q *Queries) CreateUserFile(ctx context.Context, arg CreateUserFileParams) (UserFile, error) {
	row := q.db.QueryRow(ctx, createUserFile,
		arg.OwnerID,
		arg.PhysicalFileID,
		arg.Filename,
		arg.MimeType,
		arg.Description,
		arg.Tags,
	)
	var i UserFile
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.PhysicalFileID,
		&i.Filename,
		&i.MimeType,
		&i.Description,
		&i.Tags,
		&i.UploadDate,
	)
	return i, err
}

const getPhysicalFileByHash = `-- name: GetPhysicalFileByHash :one
SELECT id, sha256_hash, size_bytes, storage_path, reference_count, created_at FROM physical_files
WHERE sha256_hash = $1 LIMIT 1
`

// Retrieves a single physical_file record by its SHA-26 hash to check for duplicates.
func (q *Queries) GetPhysicalFileByHash(ctx context.Context, sha256Hash string) (PhysicalFile, error) {
	row := q.db.QueryRow(ctx, getPhysicalFileByHash, sha256Hash)
	var i PhysicalFile
	err := row.Scan(
		&i.ID,
		&i.Sha256Hash,
		&i.SizeBytes,
		&i.StoragePath,
		&i.ReferenceCount,
		&i.CreatedAt,
	)
	return i, err
}

const incrementPhysicalFileRefCount = `-- name: IncrementPhysicalFileRefCount :one
UPDATE physical_files
SET reference_count = reference_count + 1
WHERE id = $1
RETURNING id, sha256_hash, size_bytes, storage_path, reference_count, created_at
`

// Increments the reference_count for a physical_file when a duplicate is uploaded.
// It returns the updated record.
func (q *Queries) IncrementPhysicalFileRefCount(ctx context.Context, id int64) (PhysicalFile, error) {
	row := q.db.QueryRow(ctx, incrementPhysicalFileRefCount, id)
	var i PhysicalFile
	err := row.Scan(
		&i.ID,
		&i.Sha256Hash,
		&i.SizeBytes,
		&i.StoragePath,
		&i.ReferenceCount,
		&i.CreatedAt,
	)
	return i, err
}
