// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: audit.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLog = `-- name: CreateAuditLog :exec
INSERT INTO audit_logs (user_id, action, details)
VALUES ($1, $2, $3)
`

type CreateAuditLogParams struct {
	UserID  pgtype.Int8
	Action  string
	Details []byte
}

// Inserts a new audit log entry.
func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error {
	_, err := q.db.Exec(ctx, createAuditLog, arg.UserID, arg.Action, arg.Details)
	return err
}

const listAuditLogs = `-- name: ListAuditLogs :many
SELECT id, user_id, action, details, timestamp FROM audit_logs
ORDER BY timestamp DESC
`

// For admin use: retrieves all audit log entries, newest first.
func (q *Queries) ListAuditLogs(ctx context.Context) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.Details,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
