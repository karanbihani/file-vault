// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: stats.sql

package db

import (
	"context"
)

const getUserStats = `-- name: GetUserStats :one
SELECT
    u.storage_used_bytes AS deduplicated_usage,
    COALESCE(SUM(pf.size_bytes), 0)::bigint AS original_usage
FROM users u
LEFT JOIN user_files uf ON u.id = uf.owner_id
LEFT JOIN physical_files pf ON uf.physical_file_id = pf.id
WHERE u.id = $1
GROUP BY u.id
`

type GetUserStatsRow struct {
	DeduplicatedUsage int64
	OriginalUsage     int64
}

// Retrieves storage statistics for a single user.
// It gets the pre-calculated deduplicated usage from the users table
// and calculates the original total size by summing up the sizes of all files owned by the user.
func (q *Queries) GetUserStats(ctx context.Context, id int64) (GetUserStatsRow, error) {
	row := q.db.QueryRow(ctx, getUserStats, id)
	var i GetUserStatsRow
	err := row.Scan(&i.DeduplicatedUsage, &i.OriginalUsage)
	return i, err
}
