// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth.sql

package db

import (
	"context"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreatePermission(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPermissionByName = `-- name: GetPermissionByName :one
SELECT id, name FROM permissions WHERE name = $1
`

func (q *Queries) GetPermissionByName(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionByName, name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name FROM roles WHERE name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT p.name
FROM permissions p
JOIN role_permissions rp ON p.id = rp.permission_id
JOIN user_roles ur ON rp.role_id = ur.role_id
WHERE ur.user_id = $1
`

// Retrieves all permission names for a given user ID by joining through
// user_roles and role_permissions.
func (q *Queries) GetUserPermissions(ctx context.Context, userID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkRoleToPermission = `-- name: LinkRoleToPermission :exec
INSERT INTO role_permissions (role_id, permission_id) VALUES ($1, $2)
`

type LinkRoleToPermissionParams struct {
	RoleID       int32
	PermissionID int32
}

func (q *Queries) LinkRoleToPermission(ctx context.Context, arg LinkRoleToPermissionParams) error {
	_, err := q.db.Exec(ctx, linkRoleToPermission, arg.RoleID, arg.PermissionID)
	return err
}

const linkUserToRole = `-- name: LinkUserToRole :exec
INSERT INTO user_roles (user_id, role_id) VALUES ($1, $2)
`

type LinkUserToRoleParams struct {
	UserID int64
	RoleID int32
}

func (q *Queries) LinkUserToRole(ctx context.Context, arg LinkUserToRoleParams) error {
	_, err := q.db.Exec(ctx, linkUserToRole, arg.UserID, arg.RoleID)
	return err
}
